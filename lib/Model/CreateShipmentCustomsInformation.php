<?php
/**
 * CreateShipmentCustomsInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * API Shipping V3 (REST) provides the functionality for customers to take a shipping transaction from creation to collection.   It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic and international items with Royal Mail.  Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customers??? own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateShipmentCustomsInformation Class Doc Comment
 *
 * @category Class
 * @description Extra customs information not already part of Shipment Information.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateShipmentCustomsInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateShipment.CustomsInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pre_registration_number' => 'string',
        'pre_registration_type' => 'string',
        'shipping_charges' => 'double',
        'other_charges' => 'double',
        'quoted_landed_cost' => 'double',
        'invoice_number' => 'string',
        'invoice_date' => '\DateTime',
        'export_licence' => 'bool',
        'addressee_identification_reference_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pre_registration_number' => null,
        'pre_registration_type' => null,
        'shipping_charges' => 'double',
        'other_charges' => 'double',
        'quoted_landed_cost' => 'double',
        'invoice_number' => null,
        'invoice_date' => 'date-time',
        'export_licence' => null,
        'addressee_identification_reference_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pre_registration_number' => 'PreRegistrationNumber',
        'pre_registration_type' => 'PreRegistrationType',
        'shipping_charges' => 'ShippingCharges',
        'other_charges' => 'OtherCharges',
        'quoted_landed_cost' => 'QuotedLandedCost',
        'invoice_number' => 'InvoiceNumber',
        'invoice_date' => 'InvoiceDate',
        'export_licence' => 'ExportLicence',
        'addressee_identification_reference_number' => 'AddresseeIdentificationReferenceNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pre_registration_number' => 'setPreRegistrationNumber',
        'pre_registration_type' => 'setPreRegistrationType',
        'shipping_charges' => 'setShippingCharges',
        'other_charges' => 'setOtherCharges',
        'quoted_landed_cost' => 'setQuotedLandedCost',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_date' => 'setInvoiceDate',
        'export_licence' => 'setExportLicence',
        'addressee_identification_reference_number' => 'setAddresseeIdentificationReferenceNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pre_registration_number' => 'getPreRegistrationNumber',
        'pre_registration_type' => 'getPreRegistrationType',
        'shipping_charges' => 'getShippingCharges',
        'other_charges' => 'getOtherCharges',
        'quoted_landed_cost' => 'getQuotedLandedCost',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_date' => 'getInvoiceDate',
        'export_licence' => 'getExportLicence',
        'addressee_identification_reference_number' => 'getAddresseeIdentificationReferenceNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pre_registration_number'] = isset($data['pre_registration_number']) ? $data['pre_registration_number'] : null;
        $this->container['pre_registration_type'] = isset($data['pre_registration_type']) ? $data['pre_registration_type'] : null;
        $this->container['shipping_charges'] = isset($data['shipping_charges']) ? $data['shipping_charges'] : null;
        $this->container['other_charges'] = isset($data['other_charges']) ? $data['other_charges'] : null;
        $this->container['quoted_landed_cost'] = isset($data['quoted_landed_cost']) ? $data['quoted_landed_cost'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['export_licence'] = isset($data['export_licence']) ? $data['export_licence'] : null;
        $this->container['addressee_identification_reference_number'] = isset($data['addressee_identification_reference_number']) ? $data['addressee_identification_reference_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pre_registration_number']) && (mb_strlen($this->container['pre_registration_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'pre_registration_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['pre_registration_type']) && (mb_strlen($this->container['pre_registration_type']) > 18)) {
            $invalidProperties[] = "invalid value for 'pre_registration_type', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['shipping_charges']) && ($this->container['shipping_charges'] > 99999.99)) {
            $invalidProperties[] = "invalid value for 'shipping_charges', must be smaller than or equal to 99999.99.";
        }

        if (!is_null($this->container['shipping_charges']) && ($this->container['shipping_charges'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipping_charges', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['other_charges']) && ($this->container['other_charges'] > 99999.99)) {
            $invalidProperties[] = "invalid value for 'other_charges', must be smaller than or equal to 99999.99.";
        }

        if (!is_null($this->container['other_charges']) && ($this->container['other_charges'] < 0)) {
            $invalidProperties[] = "invalid value for 'other_charges', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quoted_landed_cost']) && ($this->container['quoted_landed_cost'] > 99999.99)) {
            $invalidProperties[] = "invalid value for 'quoted_landed_cost', must be smaller than or equal to 99999.99.";
        }

        if (!is_null($this->container['quoted_landed_cost']) && ($this->container['quoted_landed_cost'] < 0)) {
            $invalidProperties[] = "invalid value for 'quoted_landed_cost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_number']) && (mb_strlen($this->container['invoice_number']) > 35)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['addressee_identification_reference_number']) && (mb_strlen($this->container['addressee_identification_reference_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'addressee_identification_reference_number', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pre_registration_number
     *
     * @return string
     */
    public function getPreRegistrationNumber()
    {
        return $this->container['pre_registration_number'];
    }

    /**
     * Sets pre_registration_number
     *
     * @param string $pre_registration_number A pre-registration number is only relevant if the INCOTERMS (International Commercial Terms) for the shipment are DDP (Delivery duty paid).<br /><br />If not provided, and the INCOTERMS are set to DDP, any pre-registration numbers set up via your Customs Settings will be used.
     *
     * @return $this
     */
    public function setPreRegistrationNumber($pre_registration_number)
    {
        if (!is_null($pre_registration_number) && (mb_strlen($pre_registration_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $pre_registration_number when calling CreateShipmentCustomsInformation., must be smaller than or equal to 50.');
        }

        $this->container['pre_registration_number'] = $pre_registration_number;

        return $this;
    }

    /**
     * Gets pre_registration_type
     *
     * @return string
     */
    public function getPreRegistrationType()
    {
        return $this->container['pre_registration_type'];
    }

    /**
     * Sets pre_registration_type
     *
     * @param string $pre_registration_type The type of pre-registration number provided above. <br />Required if a pre-registration number has been provided.<br />Ignored if there is no pre-registration number.
     *
     * @return $this
     */
    public function setPreRegistrationType($pre_registration_type)
    {
        if (!is_null($pre_registration_type) && (mb_strlen($pre_registration_type) > 18)) {
            throw new \InvalidArgumentException('invalid length for $pre_registration_type when calling CreateShipmentCustomsInformation., must be smaller than or equal to 18.');
        }

        $this->container['pre_registration_type'] = $pre_registration_type;

        return $this;
    }

    /**
     * Gets shipping_charges
     *
     * @return double
     */
    public function getShippingCharges()
    {
        return $this->container['shipping_charges'];
    }

    /**
     * Sets shipping_charges
     *
     * @param double $shipping_charges Shipping Charges for International Shipments.<br />The postage amount paid by your customer. The amount can be 0.00 if you have offered your customer free delivery. <br />Used for the calculation of customs fees.<br /><br />*The amount should be in the currency specified in the ShipmentInformation/Currency field.*
     *
     * @return $this
     */
    public function setShippingCharges($shipping_charges)
    {

        if (!is_null($shipping_charges) && ($shipping_charges > 99999.99)) {
            throw new \InvalidArgumentException('invalid value for $shipping_charges when calling CreateShipmentCustomsInformation., must be smaller than or equal to 99999.99.');
        }
        if (!is_null($shipping_charges) && ($shipping_charges < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_charges when calling CreateShipmentCustomsInformation., must be bigger than or equal to 0.');
        }

        $this->container['shipping_charges'] = $shipping_charges;

        return $this;
    }

    /**
     * Gets other_charges
     *
     * @return double
     */
    public function getOtherCharges()
    {
        return $this->container['other_charges'];
    }

    /**
     * Sets other_charges
     *
     * @param double $other_charges Insurance and Other Costs for International Shipments.<br />If you have charged your customer an additional surcharge such as insurance, you must declare the amount here. <br />This field can be left blank, or be 0.00 if no other charges have been levied.<br /><br />*Any value should be in the currency specified in the ShipmentInformation/Currency field.*
     *
     * @return $this
     */
    public function setOtherCharges($other_charges)
    {

        if (!is_null($other_charges) && ($other_charges > 99999.99)) {
            throw new \InvalidArgumentException('invalid value for $other_charges when calling CreateShipmentCustomsInformation., must be smaller than or equal to 99999.99.');
        }
        if (!is_null($other_charges) && ($other_charges < 0)) {
            throw new \InvalidArgumentException('invalid value for $other_charges when calling CreateShipmentCustomsInformation., must be bigger than or equal to 0.');
        }

        $this->container['other_charges'] = $other_charges;

        return $this;
    }

    /**
     * Gets quoted_landed_cost
     *
     * @return double
     */
    public function getQuotedLandedCost()
    {
        return $this->container['quoted_landed_cost'];
    }

    /**
     * Sets quoted_landed_cost
     *
     * @param double $quoted_landed_cost Quoted Landed Cost<br />This will be the Value of Tax and Duties due to be paid for via the purchaser to the merchant relevant to international sales of goods.<br /><br />*Any value should be in the currency specified in the ShipmentInformation/Currency field.*
     *
     * @return $this
     */
    public function setQuotedLandedCost($quoted_landed_cost)
    {

        if (!is_null($quoted_landed_cost) && ($quoted_landed_cost > 99999.99)) {
            throw new \InvalidArgumentException('invalid value for $quoted_landed_cost when calling CreateShipmentCustomsInformation., must be smaller than or equal to 99999.99.');
        }
        if (!is_null($quoted_landed_cost) && ($quoted_landed_cost < 0)) {
            throw new \InvalidArgumentException('invalid value for $quoted_landed_cost when calling CreateShipmentCustomsInformation., must be bigger than or equal to 0.');
        }

        $this->container['quoted_landed_cost'] = $quoted_landed_cost;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number Commercial Invoice Number for International Shipments.<br />When sending an item to an overseas address and a commercial invoice is available the Invoice Number and Date should be provided where possible. This supports customs processing in certain circumstances.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (!is_null($invoice_number) && (mb_strlen($invoice_number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number when calling CreateShipmentCustomsInformation., must be smaller than or equal to 35.');
        }

        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date Commercial Invoice Date - YYYY-MM-DD.<br />Required when a commercial invoice number is provided.<br />Ignored if no Invoice Number provided.
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets export_licence
     *
     * @return bool
     */
    public function getExportLicence()
    {
        return $this->container['export_licence'];
    }

    /**
     * Sets export_licence
     *
     * @param bool $export_licence Export Licence Required.<br />Customers exporting items requiring an export licence must flag the item as requiring an export licence here. This requirement is restricted to exporters of specific type of goods used predominantly for military purposes, as such will probably not apply to you. You can find out more about the type of items requiring an export licence on the UK Government website.<br /><br />If an export licence is required, it should be affixed to the outside of your parcel.
     *
     * @return $this
     */
    public function setExportLicence($export_licence)
    {
        $this->container['export_licence'] = $export_licence;

        return $this;
    }

    /**
     * Gets addressee_identification_reference_number
     *
     * @return string
     */
    public function getAddresseeIdentificationReferenceNumber()
    {
        return $this->container['addressee_identification_reference_number'];
    }

    /**
     * Sets addressee_identification_reference_number
     *
     * @param string $addressee_identification_reference_number Addressee Identification Reference Number (previously \"recipients purchasing ID\").<br />Recipient Purchasing IDs for International Shipments. <br />A small number of countries require their citizens to obtain a registration number before importing goods from overseas. When exporting items to countries with such a scheme in place there is a requirement to provide the recipients registration details to customs authorities.
     *
     * @return $this
     */
    public function setAddresseeIdentificationReferenceNumber($addressee_identification_reference_number)
    {
        if (!is_null($addressee_identification_reference_number) && (mb_strlen($addressee_identification_reference_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $addressee_identification_reference_number when calling CreateShipmentCustomsInformation., must be smaller than or equal to 20.');
        }

        $this->container['addressee_identification_reference_number'] = $addressee_identification_reference_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


