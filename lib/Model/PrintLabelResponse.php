<?php
/**
 * PrintLabelResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * API Shipping V3 (REST) provides the functionality for customers to take a shipping transaction from creation to collection.   It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic and international items with Royal Mail.  Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customers??? own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PrintLabelResponse Class Doc Comment
 *
 * @category Class
 * @description Response from a print label request, containing the label if the request was successful.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrintLabelResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PrintLabelResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipment_id' => 'string',
        'label_image' => 'string',
        'label_image_format' => 'string',
        'tracking_number' => 'string',
        'unique_id' => 'string',
        'tracking_url' => 'string',
        'carrier_code' => 'string',
        'primary2_d_barcode_image' => 'string',
        'primary2_d_barcode_data' => 'string',
        'formatted_unique_id' => 'string',
        'high_volume_barcode_data' => 'string',
        'high_volume_barcode_image' => 'string',
        'high_volume_sort_code' => 'string',
        'primary1_d_barcode_data' => 'string',
        'primary1_d_barcode_image' => 'string',
        'return_label_image_format' => 'string',
        'return_label_image' => 'string',
        'routing' => '\Swagger\Client\Model\Routing',
        'http_status_code' => 'int',
        'http_status_description' => 'string',
        'message' => 'string',
        'errors' => '\Swagger\Client\Model\ErrorDetail[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipment_id' => null,
        'label_image' => null,
        'label_image_format' => null,
        'tracking_number' => null,
        'unique_id' => null,
        'tracking_url' => null,
        'carrier_code' => null,
        'primary2_d_barcode_image' => null,
        'primary2_d_barcode_data' => null,
        'formatted_unique_id' => null,
        'high_volume_barcode_data' => null,
        'high_volume_barcode_image' => null,
        'high_volume_sort_code' => null,
        'primary1_d_barcode_data' => null,
        'primary1_d_barcode_image' => null,
        'return_label_image_format' => null,
        'return_label_image' => null,
        'routing' => null,
        'http_status_code' => 'int32',
        'http_status_description' => null,
        'message' => null,
        'errors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipment_id' => 'ShipmentId',
        'label_image' => 'LabelImage',
        'label_image_format' => 'LabelImageFormat',
        'tracking_number' => 'TrackingNumber',
        'unique_id' => 'UniqueId',
        'tracking_url' => 'TrackingUrl',
        'carrier_code' => 'CarrierCode',
        'primary2_d_barcode_image' => 'Primary2DBarcodeImage',
        'primary2_d_barcode_data' => 'Primary2DBarcodeData',
        'formatted_unique_id' => 'FormattedUniqueId',
        'high_volume_barcode_data' => 'HighVolumeBarcodeData',
        'high_volume_barcode_image' => 'HighVolumeBarcodeImage',
        'high_volume_sort_code' => 'HighVolumeSortCode',
        'primary1_d_barcode_data' => 'Primary1DBarcodeData',
        'primary1_d_barcode_image' => 'Primary1DBarcodeImage',
        'return_label_image_format' => 'ReturnLabelImageFormat',
        'return_label_image' => 'ReturnLabelImage',
        'routing' => 'Routing',
        'http_status_code' => 'HttpStatusCode',
        'http_status_description' => 'HttpStatusDescription',
        'message' => 'Message',
        'errors' => 'Errors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipment_id' => 'setShipmentId',
        'label_image' => 'setLabelImage',
        'label_image_format' => 'setLabelImageFormat',
        'tracking_number' => 'setTrackingNumber',
        'unique_id' => 'setUniqueId',
        'tracking_url' => 'setTrackingUrl',
        'carrier_code' => 'setCarrierCode',
        'primary2_d_barcode_image' => 'setPrimary2DBarcodeImage',
        'primary2_d_barcode_data' => 'setPrimary2DBarcodeData',
        'formatted_unique_id' => 'setFormattedUniqueId',
        'high_volume_barcode_data' => 'setHighVolumeBarcodeData',
        'high_volume_barcode_image' => 'setHighVolumeBarcodeImage',
        'high_volume_sort_code' => 'setHighVolumeSortCode',
        'primary1_d_barcode_data' => 'setPrimary1DBarcodeData',
        'primary1_d_barcode_image' => 'setPrimary1DBarcodeImage',
        'return_label_image_format' => 'setReturnLabelImageFormat',
        'return_label_image' => 'setReturnLabelImage',
        'routing' => 'setRouting',
        'http_status_code' => 'setHttpStatusCode',
        'http_status_description' => 'setHttpStatusDescription',
        'message' => 'setMessage',
        'errors' => 'setErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipment_id' => 'getShipmentId',
        'label_image' => 'getLabelImage',
        'label_image_format' => 'getLabelImageFormat',
        'tracking_number' => 'getTrackingNumber',
        'unique_id' => 'getUniqueId',
        'tracking_url' => 'getTrackingUrl',
        'carrier_code' => 'getCarrierCode',
        'primary2_d_barcode_image' => 'getPrimary2DBarcodeImage',
        'primary2_d_barcode_data' => 'getPrimary2DBarcodeData',
        'formatted_unique_id' => 'getFormattedUniqueId',
        'high_volume_barcode_data' => 'getHighVolumeBarcodeData',
        'high_volume_barcode_image' => 'getHighVolumeBarcodeImage',
        'high_volume_sort_code' => 'getHighVolumeSortCode',
        'primary1_d_barcode_data' => 'getPrimary1DBarcodeData',
        'primary1_d_barcode_image' => 'getPrimary1DBarcodeImage',
        'return_label_image_format' => 'getReturnLabelImageFormat',
        'return_label_image' => 'getReturnLabelImage',
        'routing' => 'getRouting',
        'http_status_code' => 'getHttpStatusCode',
        'http_status_description' => 'getHttpStatusDescription',
        'message' => 'getMessage',
        'errors' => 'getErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LABEL_IMAGE_FORMAT_PDF = 'PDF';
    const LABEL_IMAGE_FORMAT_PNG = 'PNG';
    const LABEL_IMAGE_FORMAT_DATASTREAM = 'DATASTREAM';
    const LABEL_IMAGE_FORMAT_ZPL203_DPI = 'ZPL203DPI';
    const LABEL_IMAGE_FORMAT_ZPL300_DPI = 'ZPL300DPI';
    const RETURN_LABEL_IMAGE_FORMAT_PDF = 'PDF';
    const RETURN_LABEL_IMAGE_FORMAT_PNG = 'PNG';
    const RETURN_LABEL_IMAGE_FORMAT_ZPL300_DPI = 'ZPL300DPI';
    const RETURN_LABEL_IMAGE_FORMAT_ZPL203_DPI = 'ZPL203DPI';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelImageFormatAllowableValues()
    {
        return [
            self::LABEL_IMAGE_FORMAT_PDF,
            self::LABEL_IMAGE_FORMAT_PNG,
            self::LABEL_IMAGE_FORMAT_DATASTREAM,
            self::LABEL_IMAGE_FORMAT_ZPL203_DPI,
            self::LABEL_IMAGE_FORMAT_ZPL300_DPI,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReturnLabelImageFormatAllowableValues()
    {
        return [
            self::RETURN_LABEL_IMAGE_FORMAT_PDF,
            self::RETURN_LABEL_IMAGE_FORMAT_PNG,
            self::RETURN_LABEL_IMAGE_FORMAT_ZPL300_DPI,
            self::RETURN_LABEL_IMAGE_FORMAT_ZPL203_DPI,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipment_id'] = isset($data['shipment_id']) ? $data['shipment_id'] : null;
        $this->container['label_image'] = isset($data['label_image']) ? $data['label_image'] : null;
        $this->container['label_image_format'] = isset($data['label_image_format']) ? $data['label_image_format'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['unique_id'] = isset($data['unique_id']) ? $data['unique_id'] : null;
        $this->container['tracking_url'] = isset($data['tracking_url']) ? $data['tracking_url'] : null;
        $this->container['carrier_code'] = isset($data['carrier_code']) ? $data['carrier_code'] : null;
        $this->container['primary2_d_barcode_image'] = isset($data['primary2_d_barcode_image']) ? $data['primary2_d_barcode_image'] : null;
        $this->container['primary2_d_barcode_data'] = isset($data['primary2_d_barcode_data']) ? $data['primary2_d_barcode_data'] : null;
        $this->container['formatted_unique_id'] = isset($data['formatted_unique_id']) ? $data['formatted_unique_id'] : null;
        $this->container['high_volume_barcode_data'] = isset($data['high_volume_barcode_data']) ? $data['high_volume_barcode_data'] : null;
        $this->container['high_volume_barcode_image'] = isset($data['high_volume_barcode_image']) ? $data['high_volume_barcode_image'] : null;
        $this->container['high_volume_sort_code'] = isset($data['high_volume_sort_code']) ? $data['high_volume_sort_code'] : null;
        $this->container['primary1_d_barcode_data'] = isset($data['primary1_d_barcode_data']) ? $data['primary1_d_barcode_data'] : null;
        $this->container['primary1_d_barcode_image'] = isset($data['primary1_d_barcode_image']) ? $data['primary1_d_barcode_image'] : null;
        $this->container['return_label_image_format'] = isset($data['return_label_image_format']) ? $data['return_label_image_format'] : null;
        $this->container['return_label_image'] = isset($data['return_label_image']) ? $data['return_label_image'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['http_status_code'] = isset($data['http_status_code']) ? $data['http_status_code'] : null;
        $this->container['http_status_description'] = isset($data['http_status_description']) ? $data['http_status_description'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['shipment_id']) && (mb_strlen($this->container['shipment_id']) > 21)) {
            $invalidProperties[] = "invalid value for 'shipment_id', the character length must be smaller than or equal to 21.";
        }

        if (!is_null($this->container['shipment_id']) && (mb_strlen($this->container['shipment_id']) < 13)) {
            $invalidProperties[] = "invalid value for 'shipment_id', the character length must be bigger than or equal to 13.";
        }

        $allowedValues = $this->getLabelImageFormatAllowableValues();
        if (!is_null($this->container['label_image_format']) && !in_array($this->container['label_image_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'label_image_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tracking_number']) && (mb_strlen($this->container['tracking_number']) > 13)) {
            $invalidProperties[] = "invalid value for 'tracking_number', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['tracking_number']) && (mb_strlen($this->container['tracking_number']) < 13)) {
            $invalidProperties[] = "invalid value for 'tracking_number', the character length must be bigger than or equal to 13.";
        }

        if (!is_null($this->container['unique_id']) && (mb_strlen($this->container['unique_id']) > 21)) {
            $invalidProperties[] = "invalid value for 'unique_id', the character length must be smaller than or equal to 21.";
        }

        if (!is_null($this->container['unique_id']) && (mb_strlen($this->container['unique_id']) < 21)) {
            $invalidProperties[] = "invalid value for 'unique_id', the character length must be bigger than or equal to 21.";
        }

        if (!is_null($this->container['tracking_url']) && (mb_strlen($this->container['tracking_url']) > 250)) {
            $invalidProperties[] = "invalid value for 'tracking_url', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['carrier_code']) && (mb_strlen($this->container['carrier_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'carrier_code', the character length must be smaller than or equal to 4.";
        }

        $allowedValues = $this->getReturnLabelImageFormatAllowableValues();
        if (!is_null($this->container['return_label_image_format']) && !in_array($this->container['return_label_image_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'return_label_image_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['http_status_code'] === null) {
            $invalidProperties[] = "'http_status_code' can't be null";
        }
        if ($this->container['http_status_description'] === null) {
            $invalidProperties[] = "'http_status_description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipment_id
     *
     * @return string
     */
    public function getShipmentId()
    {
        return $this->container['shipment_id'];
    }

    /**
     * Sets shipment_id
     *
     * @param string $shipment_id Shipment Id<br />Tracking Number or Unique Id of the shipment involved.
     *
     * @return $this
     */
    public function setShipmentId($shipment_id)
    {
        if (!is_null($shipment_id) && (mb_strlen($shipment_id) > 21)) {
            throw new \InvalidArgumentException('invalid length for $shipment_id when calling PrintLabelResponse., must be smaller than or equal to 21.');
        }
        if (!is_null($shipment_id) && (mb_strlen($shipment_id) < 13)) {
            throw new \InvalidArgumentException('invalid length for $shipment_id when calling PrintLabelResponse., must be bigger than or equal to 13.');
        }

        $this->container['shipment_id'] = $shipment_id;

        return $this;
    }

    /**
     * Gets label_image
     *
     * @return string
     */
    public function getLabelImage()
    {
        return $this->container['label_image'];
    }

    /**
     * Sets label_image
     *
     * @param string $label_image Label Image<br />Depends on Label Image Format<br />            <br />**PDF**<br />Base 64 encoded PDF<br />            <br />**PNG**<br />Base 64 encoded PNG<br />            <br />**ZPL 300 / 203 dpi**<br />Base 64 encoded PRN (text file)<br />            <br />**Data stream**<br />Not Included
     *
     * @return $this
     */
    public function setLabelImage($label_image)
    {
        $this->container['label_image'] = $label_image;

        return $this;
    }

    /**
     * Gets label_image_format
     *
     * @return string
     */
    public function getLabelImageFormat()
    {
        return $this->container['label_image_format'];
    }

    /**
     * Sets label_image_format
     *
     * @param string $label_image_format Label Image Format
     *
     * @return $this
     */
    public function setLabelImageFormat($label_image_format)
    {
        $allowedValues = $this->getLabelImageFormatAllowableValues();
        if (!is_null($label_image_format) && !in_array($label_image_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'label_image_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label_image_format'] = $label_image_format;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number Shipment Tracking Number<br />Final Mile carrier tracking number
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        if (!is_null($tracking_number) && (mb_strlen($tracking_number) > 13)) {
            throw new \InvalidArgumentException('invalid length for $tracking_number when calling PrintLabelResponse., must be smaller than or equal to 13.');
        }
        if (!is_null($tracking_number) && (mb_strlen($tracking_number) < 13)) {
            throw new \InvalidArgumentException('invalid length for $tracking_number when calling PrintLabelResponse., must be bigger than or equal to 13.');
        }

        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string $unique_id Unique Shipment ID
     *
     * @return $this
     */
    public function setUniqueId($unique_id)
    {
        if (!is_null($unique_id) && (mb_strlen($unique_id) > 21)) {
            throw new \InvalidArgumentException('invalid length for $unique_id when calling PrintLabelResponse., must be smaller than or equal to 21.');
        }
        if (!is_null($unique_id) && (mb_strlen($unique_id) < 21)) {
            throw new \InvalidArgumentException('invalid length for $unique_id when calling PrintLabelResponse., must be bigger than or equal to 21.');
        }

        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string $tracking_url Tracking URL<br />Final Mile Tracking, if available
     *
     * @return $this
     */
    public function setTrackingUrl($tracking_url)
    {
        if (!is_null($tracking_url) && (mb_strlen($tracking_url) > 250)) {
            throw new \InvalidArgumentException('invalid length for $tracking_url when calling PrintLabelResponse., must be smaller than or equal to 250.');
        }

        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets carrier_code
     *
     * @return string
     */
    public function getCarrierCode()
    {
        return $this->container['carrier_code'];
    }

    /**
     * Sets carrier_code
     *
     * @param string $carrier_code Carrier Code<br />The allocated carrier.
     *
     * @return $this
     */
    public function setCarrierCode($carrier_code)
    {
        if (!is_null($carrier_code) && (mb_strlen($carrier_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $carrier_code when calling PrintLabelResponse., must be smaller than or equal to 4.');
        }

        $this->container['carrier_code'] = $carrier_code;

        return $this;
    }

    /**
     * Gets primary2_d_barcode_image
     *
     * @return string
     */
    public function getPrimary2DBarcodeImage()
    {
        return $this->container['primary2_d_barcode_image'];
    }

    /**
     * Sets primary2_d_barcode_image
     *
     * @param string $primary2_d_barcode_image Primary 2D Barcode Image<br />Only populated for Data Stream response.<br />Base64 Encoded PNG Image of the 2D data matrix barcode.
     *
     * @return $this
     */
    public function setPrimary2DBarcodeImage($primary2_d_barcode_image)
    {
        $this->container['primary2_d_barcode_image'] = $primary2_d_barcode_image;

        return $this;
    }

    /**
     * Gets primary2_d_barcode_data
     *
     * @return string
     */
    public function getPrimary2DBarcodeData()
    {
        return $this->container['primary2_d_barcode_data'];
    }

    /**
     * Sets primary2_d_barcode_data
     *
     * @param string $primary2_d_barcode_data Primary 2D Barcode Data - Base 64 Encoded<br />Only populated for Data Stream response.<br />Data required to create your own 2D data matrix barcode. Please decode before use.
     *
     * @return $this
     */
    public function setPrimary2DBarcodeData($primary2_d_barcode_data)
    {
        $this->container['primary2_d_barcode_data'] = $primary2_d_barcode_data;

        return $this;
    }

    /**
     * Gets formatted_unique_id
     *
     * @return string
     */
    public function getFormattedUniqueId()
    {
        return $this->container['formatted_unique_id'];
    }

    /**
     * Sets formatted_unique_id
     *
     * @param string $formatted_unique_id Formatted Unique Id<br />Only populated for Data Stream response.<br />Label for 2D data matrix barcode.
     *
     * @return $this
     */
    public function setFormattedUniqueId($formatted_unique_id)
    {
        $this->container['formatted_unique_id'] = $formatted_unique_id;

        return $this;
    }

    /**
     * Gets high_volume_barcode_data
     *
     * @return string
     */
    public function getHighVolumeBarcodeData()
    {
        return $this->container['high_volume_barcode_data'];
    }

    /**
     * Sets high_volume_barcode_data
     *
     * @param string $high_volume_barcode_data High Volume Barcode Data<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Data required to create your own High Volume barcode.
     *
     * @return $this
     */
    public function setHighVolumeBarcodeData($high_volume_barcode_data)
    {
        $this->container['high_volume_barcode_data'] = $high_volume_barcode_data;

        return $this;
    }

    /**
     * Gets high_volume_barcode_image
     *
     * @return string
     */
    public function getHighVolumeBarcodeImage()
    {
        return $this->container['high_volume_barcode_image'];
    }

    /**
     * Sets high_volume_barcode_image
     *
     * @param string $high_volume_barcode_image High Volume Barcode Image<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Base64 Encoded PNG Image of the High Volume barcode.
     *
     * @return $this
     */
    public function setHighVolumeBarcodeImage($high_volume_barcode_image)
    {
        $this->container['high_volume_barcode_image'] = $high_volume_barcode_image;

        return $this;
    }

    /**
     * Gets high_volume_sort_code
     *
     * @return string
     */
    public function getHighVolumeSortCode()
    {
        return $this->container['high_volume_sort_code'];
    }

    /**
     * Sets high_volume_sort_code
     *
     * @param string $high_volume_sort_code High Volume Sort Code<br />Only populated for Data Stream response where the service requires the sort code on the label.
     *
     * @return $this
     */
    public function setHighVolumeSortCode($high_volume_sort_code)
    {
        $this->container['high_volume_sort_code'] = $high_volume_sort_code;

        return $this;
    }

    /**
     * Gets primary1_d_barcode_data
     *
     * @return string
     */
    public function getPrimary1DBarcodeData()
    {
        return $this->container['primary1_d_barcode_data'];
    }

    /**
     * Sets primary1_d_barcode_data
     *
     * @param string $primary1_d_barcode_data Primary 1D Barcode Data<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Data required to create your own 1D barcode.
     *
     * @return $this
     */
    public function setPrimary1DBarcodeData($primary1_d_barcode_data)
    {
        $this->container['primary1_d_barcode_data'] = $primary1_d_barcode_data;

        return $this;
    }

    /**
     * Gets primary1_d_barcode_image
     *
     * @return string
     */
    public function getPrimary1DBarcodeImage()
    {
        return $this->container['primary1_d_barcode_image'];
    }

    /**
     * Sets primary1_d_barcode_image
     *
     * @param string $primary1_d_barcode_image Primary 1D Barcode Image<br />Only populated for Data Stream response where the service requires the barcode on the label.<br />Base64 Encoded PNG Image of the 1D barcode.
     *
     * @return $this
     */
    public function setPrimary1DBarcodeImage($primary1_d_barcode_image)
    {
        $this->container['primary1_d_barcode_image'] = $primary1_d_barcode_image;

        return $this;
    }

    /**
     * Gets return_label_image_format
     *
     * @return string
     */
    public function getReturnLabelImageFormat()
    {
        return $this->container['return_label_image_format'];
    }

    /**
     * Sets return_label_image_format
     *
     * @param string $return_label_image_format Return Label Image Format
     *
     * @return $this
     */
    public function setReturnLabelImageFormat($return_label_image_format)
    {
        $allowedValues = $this->getReturnLabelImageFormatAllowableValues();
        if (!is_null($return_label_image_format) && !in_array($return_label_image_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'return_label_image_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['return_label_image_format'] = $return_label_image_format;

        return $this;
    }

    /**
     * Gets return_label_image
     *
     * @return string
     */
    public function getReturnLabelImage()
    {
        return $this->container['return_label_image'];
    }

    /**
     * Sets return_label_image
     *
     * @param string $return_label_image Return Label Image<br />Any return label that have been created as a result of the request and label option settings.<br />Depends on ReturnLabelImageFormat.<br />            <br />**PDF**<br />Base 64 encoded PDF<br />            <br />**PNG**<br />Base 64 encoded PNG<br />            <br />**ZPL 300 / 203 dpi**<br />Base 64 encoded PRN (text file)
     *
     * @return $this
     */
    public function setReturnLabelImage($return_label_image)
    {
        $this->container['return_label_image'] = $return_label_image;

        return $this;
    }

    /**
     * Gets routing
     *
     * @return \Swagger\Client\Model\Routing
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param \Swagger\Client\Model\Routing $routing routing
     *
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets http_status_code
     *
     * @return int
     */
    public function getHttpStatusCode()
    {
        return $this->container['http_status_code'];
    }

    /**
     * Sets http_status_code
     *
     * @param int $http_status_code HTTP Status Code
     *
     * @return $this
     */
    public function setHttpStatusCode($http_status_code)
    {
        $this->container['http_status_code'] = $http_status_code;

        return $this;
    }

    /**
     * Gets http_status_description
     *
     * @return string
     */
    public function getHttpStatusDescription()
    {
        return $this->container['http_status_description'];
    }

    /**
     * Sets http_status_description
     *
     * @param string $http_status_description HTTP Status Description
     *
     * @return $this
     */
    public function setHttpStatusDescription($http_status_description)
    {
        $this->container['http_status_description'] = $http_status_description;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Message<br />Successful response may include a success message.<br />Failure responses will have general reason as to why. Further details may be contained in the list of errors.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \Swagger\Client\Model\ErrorDetail[]
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \Swagger\Client\Model\ErrorDetail[] $errors Errors<br />Details about why a request failed.
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void 
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


