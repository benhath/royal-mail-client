<?php
/**
 * CreateShipmentServiceOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * API Shipping V3 (REST) provides the functionality for customers to take a shipping transaction from creation to collection.   It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic and international items with Royal Mail.  Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customers??? own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateShipmentServiceOptions Class Doc Comment
 *
 * @category Class
 * @description The Service Options for a Royal Mail Shipment, used in a shipment request.&lt;br /&gt;Required if have more than 1 possible Posting Location.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateShipmentServiceOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateShipment.ServiceOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'posting_location' => 'string',
        'service_level' => 'string',
        'service_format' => 'string',
        'safeplace' => 'string',
        'saturday_guaranteed' => 'bool',
        'consequential_loss' => 'string',
        'local_collect' => 'bool',
        'tracking_notifications' => 'string',
        'recorded_signed_for' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'posting_location' => null,
        'service_level' => null,
        'service_format' => null,
        'safeplace' => null,
        'saturday_guaranteed' => null,
        'consequential_loss' => null,
        'local_collect' => null,
        'tracking_notifications' => null,
        'recorded_signed_for' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'posting_location' => 'PostingLocation',
        'service_level' => 'ServiceLevel',
        'service_format' => 'ServiceFormat',
        'safeplace' => 'Safeplace',
        'saturday_guaranteed' => 'SaturdayGuaranteed',
        'consequential_loss' => 'ConsequentialLoss',
        'local_collect' => 'LocalCollect',
        'tracking_notifications' => 'TrackingNotifications',
        'recorded_signed_for' => 'RecordedSignedFor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'posting_location' => 'setPostingLocation',
        'service_level' => 'setServiceLevel',
        'service_format' => 'setServiceFormat',
        'safeplace' => 'setSafeplace',
        'saturday_guaranteed' => 'setSaturdayGuaranteed',
        'consequential_loss' => 'setConsequentialLoss',
        'local_collect' => 'setLocalCollect',
        'tracking_notifications' => 'setTrackingNotifications',
        'recorded_signed_for' => 'setRecordedSignedFor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'posting_location' => 'getPostingLocation',
        'service_level' => 'getServiceLevel',
        'service_format' => 'getServiceFormat',
        'safeplace' => 'getSafeplace',
        'saturday_guaranteed' => 'getSaturdayGuaranteed',
        'consequential_loss' => 'getConsequentialLoss',
        'local_collect' => 'getLocalCollect',
        'tracking_notifications' => 'getTrackingNotifications',
        'recorded_signed_for' => 'getRecordedSignedFor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SERVICE_FORMAT_L = 'L';
    const SERVICE_FORMAT_F = 'F';
    const SERVICE_FORMAT_P = 'P';
    const SERVICE_FORMAT_S = 'S';
    const CONSEQUENTIAL_LOSS_LEVEL1 = 'Level1';
    const CONSEQUENTIAL_LOSS_LEVEL2 = 'Level2';
    const CONSEQUENTIAL_LOSS_LEVEL3 = 'Level3';
    const CONSEQUENTIAL_LOSS_LEVEL4 = 'Level4';
    const CONSEQUENTIAL_LOSS_LEVEL5 = 'Level5';
    const TRACKING_NOTIFICATIONS_EMAIL = 'Email';
    const TRACKING_NOTIFICATIONS_SMS = 'SMS';
    const TRACKING_NOTIFICATIONS_EMAIL_AND_SMS = 'EmailAndSMS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceFormatAllowableValues()
    {
        return [
            self::SERVICE_FORMAT_L,
            self::SERVICE_FORMAT_F,
            self::SERVICE_FORMAT_P,
            self::SERVICE_FORMAT_S,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConsequentialLossAllowableValues()
    {
        return [
            self::CONSEQUENTIAL_LOSS_LEVEL1,
            self::CONSEQUENTIAL_LOSS_LEVEL2,
            self::CONSEQUENTIAL_LOSS_LEVEL3,
            self::CONSEQUENTIAL_LOSS_LEVEL4,
            self::CONSEQUENTIAL_LOSS_LEVEL5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrackingNotificationsAllowableValues()
    {
        return [
            self::TRACKING_NOTIFICATIONS_EMAIL,
            self::TRACKING_NOTIFICATIONS_SMS,
            self::TRACKING_NOTIFICATIONS_EMAIL_AND_SMS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['posting_location'] = isset($data['posting_location']) ? $data['posting_location'] : null;
        $this->container['service_level'] = isset($data['service_level']) ? $data['service_level'] : null;
        $this->container['service_format'] = isset($data['service_format']) ? $data['service_format'] : null;
        $this->container['safeplace'] = isset($data['safeplace']) ? $data['safeplace'] : null;
        $this->container['saturday_guaranteed'] = isset($data['saturday_guaranteed']) ? $data['saturday_guaranteed'] : null;
        $this->container['consequential_loss'] = isset($data['consequential_loss']) ? $data['consequential_loss'] : null;
        $this->container['local_collect'] = isset($data['local_collect']) ? $data['local_collect'] : null;
        $this->container['tracking_notifications'] = isset($data['tracking_notifications']) ? $data['tracking_notifications'] : null;
        $this->container['recorded_signed_for'] = isset($data['recorded_signed_for']) ? $data['recorded_signed_for'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['posting_location'] === null) {
            $invalidProperties[] = "'posting_location' can't be null";
        }
        if ((mb_strlen($this->container['posting_location']) > 10)) {
            $invalidProperties[] = "invalid value for 'posting_location', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['posting_location']) < 10)) {
            $invalidProperties[] = "invalid value for 'posting_location', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['service_level']) && (mb_strlen($this->container['service_level']) > 2)) {
            $invalidProperties[] = "invalid value for 'service_level', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['service_level']) && (mb_strlen($this->container['service_level']) < 2)) {
            $invalidProperties[] = "invalid value for 'service_level', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getServiceFormatAllowableValues();
        if (!is_null($this->container['service_format']) && !in_array($this->container['service_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'service_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['safeplace']) && (mb_strlen($this->container['safeplace']) > 30)) {
            $invalidProperties[] = "invalid value for 'safeplace', the character length must be smaller than or equal to 30.";
        }

        $allowedValues = $this->getConsequentialLossAllowableValues();
        if (!is_null($this->container['consequential_loss']) && !in_array($this->container['consequential_loss'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'consequential_loss', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTrackingNotificationsAllowableValues();
        if (!is_null($this->container['tracking_notifications']) && !in_array($this->container['tracking_notifications'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tracking_notifications', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets posting_location
     *
     * @return string
     */
    public function getPostingLocation()
    {
        return $this->container['posting_location'];
    }

    /**
     * Sets posting_location
     *
     * @param string $posting_location Posting Location.<br />Optional if you only have 1 Posting Location.
     *
     * @return $this
     */
    public function setPostingLocation($posting_location)
    {
        if ((mb_strlen($posting_location) > 10)) {
            throw new \InvalidArgumentException('invalid length for $posting_location when calling CreateShipmentServiceOptions., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($posting_location) < 10)) {
            throw new \InvalidArgumentException('invalid length for $posting_location when calling CreateShipmentServiceOptions., must be bigger than or equal to 10.');
        }

        $this->container['posting_location'] = $posting_location;

        return $this;
    }

    /**
     * Gets service_level
     *
     * @return string
     */
    public function getServiceLevel()
    {
        return $this->container['service_level'];
    }

    /**
     * Sets service_level
     *
     * @param string $service_level Service Level<br />Valid values are 01-99.<br />Defaults to lowest service level if not provided.
     *
     * @return $this
     */
    public function setServiceLevel($service_level)
    {
        if (!is_null($service_level) && (mb_strlen($service_level) > 2)) {
            throw new \InvalidArgumentException('invalid length for $service_level when calling CreateShipmentServiceOptions., must be smaller than or equal to 2.');
        }
        if (!is_null($service_level) && (mb_strlen($service_level) < 2)) {
            throw new \InvalidArgumentException('invalid length for $service_level when calling CreateShipmentServiceOptions., must be bigger than or equal to 2.');
        }

        $this->container['service_level'] = $service_level;

        return $this;
    }

    /**
     * Gets service_format
     *
     * @return string
     */
    public function getServiceFormat()
    {
        return $this->container['service_format'];
    }

    /**
     * Sets service_format
     *
     * @param string $service_format Service Format<br />            <br />**L** - Letter<br />**F** - Large Letter<br />**P** - Parcel<br />**S** - Printed Papers - International Services Only
     *
     * @return $this
     */
    public function setServiceFormat($service_format)
    {
        $allowedValues = $this->getServiceFormatAllowableValues();
        if (!is_null($service_format) && !in_array($service_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_format'] = $service_format;

        return $this;
    }

    /**
     * Gets safeplace
     *
     * @return string
     */
    public function getSafeplace()
    {
        return $this->container['safeplace'];
    }

    /**
     * Sets safeplace
     *
     * @param string $safeplace Safe Place Enhancement<br />Free text to describe a safe place to leave the parcel.<br />Returns an error if the service does not allow Safeplace.
     *
     * @return $this
     */
    public function setSafeplace($safeplace)
    {
        if (!is_null($safeplace) && (mb_strlen($safeplace) > 30)) {
            throw new \InvalidArgumentException('invalid length for $safeplace when calling CreateShipmentServiceOptions., must be smaller than or equal to 30.');
        }

        $this->container['safeplace'] = $safeplace;

        return $this;
    }

    /**
     * Gets saturday_guaranteed
     *
     * @return bool
     */
    public function getSaturdayGuaranteed()
    {
        return $this->container['saturday_guaranteed'];
    }

    /**
     * Sets saturday_guaranteed
     *
     * @param bool $saturday_guaranteed Saturday Guaranteed Enhancement<br />Available for Domestic Special Delivery Services Only<br />Returns an error if requested and the service does not allow it.
     *
     * @return $this
     */
    public function setSaturdayGuaranteed($saturday_guaranteed)
    {
        $this->container['saturday_guaranteed'] = $saturday_guaranteed;

        return $this;
    }

    /**
     * Gets consequential_loss
     *
     * @return string
     */
    public function getConsequentialLoss()
    {
        return $this->container['consequential_loss'];
    }

    /**
     * Sets consequential_loss
     *
     * @param string $consequential_loss Consequential Loss Enhancement<br />Available for Domestic Special Delivery Services Only.<br />            <br />**Level1** - ??1,000<br />**Level2** - ??2,500<br />**Level3** - ??5,000<br />**Level4** - ??7,500<br />**Level5** - ??10,000<br />            <br />Returns an error if requested and the service does not allow it.
     *
     * @return $this
     */
    public function setConsequentialLoss($consequential_loss)
    {
        $allowedValues = $this->getConsequentialLossAllowableValues();
        if (!is_null($consequential_loss) && !in_array($consequential_loss, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'consequential_loss', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['consequential_loss'] = $consequential_loss;

        return $this;
    }

    /**
     * Gets local_collect
     *
     * @return bool
     */
    public function getLocalCollect()
    {
        return $this->container['local_collect'];
    }

    /**
     * Sets local_collect
     *
     * @param bool $local_collect Local Collect Enhancement<br />Available for Domestic Special Delivery and Domestic Tracked services only.<br />Returns an error if requested and the service does not allow it.
     *
     * @return $this
     */
    public function setLocalCollect($local_collect)
    {
        $this->container['local_collect'] = $local_collect;

        return $this;
    }

    /**
     * Gets tracking_notifications
     *
     * @return string
     */
    public function getTrackingNotifications()
    {
        return $this->container['tracking_notifications'];
    }

    /**
     * Sets tracking_notifications
     *
     * @param string $tracking_notifications Tracking Notifications Enhancement<br />Available for Domestic Special Delivery and Domestic Tracked services.<br />The Email notification enhancement is also available for International Tracked and International Tracked and Signed services.<br />Returns an error if requested and the service does not allow it.
     *
     * @return $this
     */
    public function setTrackingNotifications($tracking_notifications)
    {
        $allowedValues = $this->getTrackingNotificationsAllowableValues();
        if (!is_null($tracking_notifications) && !in_array($tracking_notifications, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tracking_notifications', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tracking_notifications'] = $tracking_notifications;

        return $this;
    }

    /**
     * Gets recorded_signed_for
     *
     * @return bool
     */
    public function getRecordedSignedFor()
    {
        return $this->container['recorded_signed_for'];
    }

    /**
     * Sets recorded_signed_for
     *
     * @param bool $recorded_signed_for Recorded Signed For<br />Available for all Domestic Services that are not Special Delivery, Tracked or BFPO.<br />This is an enhancement for services that don't have an in-built signature service like Special Delivery and Tracked.<br />Returns an error if requested and the service does not allow it.
     *
     * @return $this
     */
    public function setRecordedSignedFor($recorded_signed_for)
    {
        $this->container['recorded_signed_for'] = $recorded_signed_for;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


