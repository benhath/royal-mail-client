<?php
/**
 * CreateShipmentShipmentPackage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * API Shipping V3 (REST) provides the functionality for customers to take a shipping transaction from creation to collection.   It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic and international items with Royal Mail.  Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customers??? own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateShipmentShipmentPackage Class Doc Comment
 *
 * @category Class
 * @description Details of a package in a shipment request.&lt;br /&gt;Enter the dimensions and weight of the package in the shipment. Use the PackageOccurance to indicate the items within the package.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateShipmentShipmentPackage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateShipment.ShipmentPackage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_occurrence' => 'int',
        'packaging_id' => 'string',
        'weight' => 'double',
        'length' => 'double',
        'width' => 'double',
        'height' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_occurrence' => 'int32',
        'packaging_id' => null,
        'weight' => 'double',
        'length' => 'double',
        'width' => 'double',
        'height' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'package_occurrence' => 'PackageOccurrence',
        'packaging_id' => 'PackagingId',
        'weight' => 'Weight',
        'length' => 'Length',
        'width' => 'Width',
        'height' => 'Height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'package_occurrence' => 'setPackageOccurrence',
        'packaging_id' => 'setPackagingId',
        'weight' => 'setWeight',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'package_occurrence' => 'getPackageOccurrence',
        'packaging_id' => 'getPackagingId',
        'weight' => 'getWeight',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_occurrence'] = isset($data['package_occurrence']) ? $data['package_occurrence'] : null;
        $this->container['packaging_id'] = isset($data['packaging_id']) ? $data['packaging_id'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['package_occurrence'] === null) {
            $invalidProperties[] = "'package_occurrence' can't be null";
        }
        if (($this->container['package_occurrence'] > 9)) {
            $invalidProperties[] = "invalid value for 'package_occurrence', must be smaller than or equal to 9.";
        }

        if (($this->container['package_occurrence'] < 1)) {
            $invalidProperties[] = "invalid value for 'package_occurrence', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['packaging_id']) && (mb_strlen($this->container['packaging_id']) > 70)) {
            $invalidProperties[] = "invalid value for 'packaging_id', the character length must be smaller than or equal to 70.";
        }

        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if (!is_null($this->container['length']) && ($this->container['length'] > 250)) {
            $invalidProperties[] = "invalid value for 'length', must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['length']) && ($this->container['length'] < 0.01)) {
            $invalidProperties[] = "invalid value for 'length', must be bigger than or equal to 0.01.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] > 250)) {
            $invalidProperties[] = "invalid value for 'width', must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] < 0.01)) {
            $invalidProperties[] = "invalid value for 'width', must be bigger than or equal to 0.01.";
        }

        if (!is_null($this->container['height']) && ($this->container['height'] > 250)) {
            $invalidProperties[] = "invalid value for 'height', must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['height']) && ($this->container['height'] < 0.01)) {
            $invalidProperties[] = "invalid value for 'height', must be bigger than or equal to 0.01.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets package_occurrence
     *
     * @return int
     */
    public function getPackageOccurrence()
    {
        return $this->container['package_occurrence'];
    }

    /**
     * Sets package_occurrence
     *
     * @param int $package_occurrence Package Occurrence<br />Unique package number within this shipment.<br />Cannot exceed total number of packages.
     *
     * @return $this
     */
    public function setPackageOccurrence($package_occurrence)
    {

        if (($package_occurrence > 9)) {
            throw new \InvalidArgumentException('invalid value for $package_occurrence when calling CreateShipmentShipmentPackage., must be smaller than or equal to 9.');
        }
        if (($package_occurrence < 1)) {
            throw new \InvalidArgumentException('invalid value for $package_occurrence when calling CreateShipmentShipmentPackage., must be bigger than or equal to 1.');
        }

        $this->container['package_occurrence'] = $package_occurrence;

        return $this;
    }

    /**
     * Gets packaging_id
     *
     * @return string
     */
    public function getPackagingId()
    {
        return $this->container['packaging_id'];
    }

    /**
     * Sets packaging_id
     *
     * @param string $packaging_id Packaging ID<br />If supplied, packaging details will be populated from the stored information.
     *
     * @return $this
     */
    public function setPackagingId($packaging_id)
    {
        if (!is_null($packaging_id) && (mb_strlen($packaging_id) > 70)) {
            throw new \InvalidArgumentException('invalid length for $packaging_id when calling CreateShipmentShipmentPackage., must be smaller than or equal to 70.');
        }

        $this->container['packaging_id'] = $packaging_id;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight Total Package Weight.<br />            <br />This field will be used as the Shipment Weight for single-package services such as RMG.<br />The package weight must be greater than or equal to the sum of all item weights and packaging, if this information is provided.<br />Min weight: 1 gram.<br />*Optional/Overwritten for Average Weight Services - Average Weight Customers only.*
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets length
     *
     * @return double
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param double $length Package Length<br />Dimensions are in Centimetres.<br />*Dimensions are optional, however supplying accurate information helps ensure a smooth delivery experience.*
     *
     * @return $this
     */
    public function setLength($length)
    {

        if (!is_null($length) && ($length > 250)) {
            throw new \InvalidArgumentException('invalid value for $length when calling CreateShipmentShipmentPackage., must be smaller than or equal to 250.');
        }
        if (!is_null($length) && ($length < 0.01)) {
            throw new \InvalidArgumentException('invalid value for $length when calling CreateShipmentShipmentPackage., must be bigger than or equal to 0.01.');
        }

        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width Package Width<br />Dimensions are in Centimetres.<br />*Dimensions are optional, however supplying accurate information helps ensure a smooth delivery experience.*
     *
     * @return $this
     */
    public function setWidth($width)
    {

        if (!is_null($width) && ($width > 250)) {
            throw new \InvalidArgumentException('invalid value for $width when calling CreateShipmentShipmentPackage., must be smaller than or equal to 250.');
        }
        if (!is_null($width) && ($width < 0.01)) {
            throw new \InvalidArgumentException('invalid value for $width when calling CreateShipmentShipmentPackage., must be bigger than or equal to 0.01.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height Package Height<br />Dimensions are in Centimetres.<br />*Dimensions are optional, however supplying accurate information helps ensure a smooth delivery experience.*
     *
     * @return $this
     */
    public function setHeight($height)
    {

        if (!is_null($height) && ($height > 250)) {
            throw new \InvalidArgumentException('invalid value for $height when calling CreateShipmentShipmentPackage., must be smaller than or equal to 250.');
        }
        if (!is_null($height) && ($height < 0.01)) {
            throw new \InvalidArgumentException('invalid value for $height when calling CreateShipmentShipmentPackage., must be bigger than or equal to 0.01.');
        }

        $this->container['height'] = $height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


