<?php
/**
 * PackagingApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * API Shipping V3 (REST) provides the functionality for customers to take a shipping transaction from creation to collection.   It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic and international items with Royal Mail.  Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customers??? own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PackagingApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackagingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation packagingCreate
     *
     * Create Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging details. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PackagingResponse
     */
    public function packagingCreate($x_rmg_auth_token, $packaging)
    {
        list($response) = $this->packagingCreateWithHttpInfo($x_rmg_auth_token, $packaging);
        return $response;
    }

    /**
     * Operation packagingCreateWithHttpInfo
     *
     * Create Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging details. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PackagingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function packagingCreateWithHttpInfo($x_rmg_auth_token, $packaging)
    {
        $returnType = '\Swagger\Client\Model\PackagingResponse';
        $request = $this->packagingCreateRequest($x_rmg_auth_token, $packaging);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        json_decode($e->getResponseBody()),
                        '\Swagger\Client\Model\PackagingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        json_decode($e->getResponseBody()),
                        '\Swagger\Client\Model\PackagingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation packagingCreateAsync
     *
     * Create Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingCreateAsync($x_rmg_auth_token, $packaging)
    {
        return $this->packagingCreateAsyncWithHttpInfo($x_rmg_auth_token, $packaging)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation packagingCreateAsyncWithHttpInfo
     *
     * Create Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingCreateAsyncWithHttpInfo($x_rmg_auth_token, $packaging)
    {
        $returnType = '\Swagger\Client\Model\PackagingResponse';
        $request = $this->packagingCreateRequest($x_rmg_auth_token, $packaging);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'packagingCreate'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function packagingCreateRequest($x_rmg_auth_token, $packaging)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling packagingCreate'
            );
        }
        // verify the required parameter 'packaging' is set
        if ($packaging === null || (is_array($packaging) && count($packaging) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packaging when calling packagingCreate'
            );
        }

        $resourcePath = '/packaging';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }


        // body params
        $_tempBody = null;
        if (isset($packaging)) {
            $_tempBody = $packaging;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation packagingDelete
     *
     * Delete Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to delete. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PackagingResponse
     */
    public function packagingDelete($x_rmg_auth_token, $packaging_id)
    {
        list($response) = $this->packagingDeleteWithHttpInfo($x_rmg_auth_token, $packaging_id);
        return $response;
    }

    /**
     * Operation packagingDeleteWithHttpInfo
     *
     * Delete Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to delete. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PackagingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function packagingDeleteWithHttpInfo($x_rmg_auth_token, $packaging_id)
    {
        $returnType = '\Swagger\Client\Model\PackagingResponse';
        $request = $this->packagingDeleteRequest($x_rmg_auth_token, $packaging_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        json_decode($e->getResponseBody()),
                        '\Swagger\Client\Model\PackagingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation packagingDeleteAsync
     *
     * Delete Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingDeleteAsync($x_rmg_auth_token, $packaging_id)
    {
        return $this->packagingDeleteAsyncWithHttpInfo($x_rmg_auth_token, $packaging_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation packagingDeleteAsyncWithHttpInfo
     *
     * Delete Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingDeleteAsyncWithHttpInfo($x_rmg_auth_token, $packaging_id)
    {
        $returnType = '\Swagger\Client\Model\PackagingResponse';
        $request = $this->packagingDeleteRequest($x_rmg_auth_token, $packaging_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'packagingDelete'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function packagingDeleteRequest($x_rmg_auth_token, $packaging_id)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling packagingDelete'
            );
        }
        // verify the required parameter 'packaging_id' is set
        if ($packaging_id === null || (is_array($packaging_id) && count($packaging_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packaging_id when calling packagingDelete'
            );
        }

        $resourcePath = '/packaging/{packagingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }

        // path params
        if ($packaging_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packagingId' . '}',
                ObjectSerializer::toPathValue($packaging_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation packagingGet
     *
     * Get Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your Unique Packaging ID. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Packaging
     */
    public function packagingGet($x_rmg_auth_token, $packaging_id)
    {
        list($response) = $this->packagingGetWithHttpInfo($x_rmg_auth_token, $packaging_id);
        return $response;
    }

    /**
     * Operation packagingGetWithHttpInfo
     *
     * Get Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your Unique Packaging ID. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Packaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function packagingGetWithHttpInfo($x_rmg_auth_token, $packaging_id)
    {
        $returnType = '\Swagger\Client\Model\Packaging';
        $request = $this->packagingGetRequest($x_rmg_auth_token, $packaging_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        json_decode($e->getResponseBody()),
                        '\Swagger\Client\Model\Packaging',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation packagingGetAsync
     *
     * Get Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your Unique Packaging ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingGetAsync($x_rmg_auth_token, $packaging_id)
    {
        return $this->packagingGetAsyncWithHttpInfo($x_rmg_auth_token, $packaging_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation packagingGetAsyncWithHttpInfo
     *
     * Get Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your Unique Packaging ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingGetAsyncWithHttpInfo($x_rmg_auth_token, $packaging_id)
    {
        $returnType = '\Swagger\Client\Model\Packaging';
        $request = $this->packagingGetRequest($x_rmg_auth_token, $packaging_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'packagingGet'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your Unique Packaging ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function packagingGetRequest($x_rmg_auth_token, $packaging_id)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling packagingGet'
            );
        }
        // verify the required parameter 'packaging_id' is set
        if ($packaging_id === null || (is_array($packaging_id) && count($packaging_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packaging_id when calling packagingGet'
            );
        }

        $resourcePath = '/packaging/{packagingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }

        // path params
        if ($packaging_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packagingId' . '}',
                ObjectSerializer::toPathValue($packaging_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation packagingGetAll
     *
     * Get All Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Packaging[]
     */
    public function packagingGetAll($x_rmg_auth_token)
    {
        list($response) = $this->packagingGetAllWithHttpInfo($x_rmg_auth_token);
        return $response;
    }

    /**
     * Operation packagingGetAllWithHttpInfo
     *
     * Get All Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Packaging[], HTTP status code, HTTP response headers (array of strings)
     */
    public function packagingGetAllWithHttpInfo($x_rmg_auth_token)
    {
        $returnType = '\Swagger\Client\Model\Packaging[]';
        $request = $this->packagingGetAllRequest($x_rmg_auth_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        json_decode($e->getResponseBody()),
                        '\Swagger\Client\Model\Packaging[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation packagingGetAllAsync
     *
     * Get All Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingGetAllAsync($x_rmg_auth_token)
    {
        return $this->packagingGetAllAsyncWithHttpInfo($x_rmg_auth_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation packagingGetAllAsyncWithHttpInfo
     *
     * Get All Packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingGetAllAsyncWithHttpInfo($x_rmg_auth_token)
    {
        $returnType = '\Swagger\Client\Model\Packaging[]';
        $request = $this->packagingGetAllRequest($x_rmg_auth_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'packagingGetAll'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function packagingGetAllRequest($x_rmg_auth_token)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling packagingGetAll'
            );
        }

        $resourcePath = '/packaging';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation packagingUpdate
     *
     * Update packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to update. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging with the updated details. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PackagingResponse
     */
    public function packagingUpdate($x_rmg_auth_token, $packaging_id, $packaging)
    {
        list($response) = $this->packagingUpdateWithHttpInfo($x_rmg_auth_token, $packaging_id, $packaging);
        return $response;
    }

    /**
     * Operation packagingUpdateWithHttpInfo
     *
     * Update packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to update. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging with the updated details. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PackagingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function packagingUpdateWithHttpInfo($x_rmg_auth_token, $packaging_id, $packaging)
    {
        $returnType = '\Swagger\Client\Model\PackagingResponse';
        $request = $this->packagingUpdateRequest($x_rmg_auth_token, $packaging_id, $packaging);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        json_decode($e->getResponseBody()),
                        '\Swagger\Client\Model\PackagingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        json_decode($e->getResponseBody()),
                        '\Swagger\Client\Model\PackagingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation packagingUpdateAsync
     *
     * Update packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to update. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging with the updated details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingUpdateAsync($x_rmg_auth_token, $packaging_id, $packaging)
    {
        return $this->packagingUpdateAsyncWithHttpInfo($x_rmg_auth_token, $packaging_id, $packaging)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation packagingUpdateAsyncWithHttpInfo
     *
     * Update packaging
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to update. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging with the updated details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function packagingUpdateAsyncWithHttpInfo($x_rmg_auth_token, $packaging_id, $packaging)
    {
        $returnType = '\Swagger\Client\Model\PackagingResponse';
        $request = $this->packagingUpdateRequest($x_rmg_auth_token, $packaging_id, $packaging);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'packagingUpdate'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $packaging_id Your unique Packaging ID of the packaging details to update. (required)
     * @param  \Swagger\Client\Model\Packaging $packaging The packaging with the updated details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function packagingUpdateRequest($x_rmg_auth_token, $packaging_id, $packaging)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling packagingUpdate'
            );
        }
        // verify the required parameter 'packaging_id' is set
        if ($packaging_id === null || (is_array($packaging_id) && count($packaging_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packaging_id when calling packagingUpdate'
            );
        }
        // verify the required parameter 'packaging' is set
        if ($packaging === null || (is_array($packaging) && count($packaging) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packaging when calling packagingUpdate'
            );
        }

        $resourcePath = '/packaging/{packagingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }

        // path params
        if ($packaging_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packagingId' . '}',
                ObjectSerializer::toPathValue($packaging_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($packaging)) {
            $_tempBody = $packaging;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
