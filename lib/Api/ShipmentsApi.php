<?php
/**
 * ShipmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V3 (REST)
 *
 * API Shipping V3 (REST) provides the functionality for customers to take a shipping transaction from creation to collection.   It specifically covers how the Royal Mail API Shipping V3 can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V3 exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic and international items with Royal Mail.  Built on industry standards, Royal Mail API Shipping V3 provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming to allow customers greater flexibility when generating their labels. There are no costs to customers for using the Royal Mail API Shipping V3 services, however customers??? own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating/ cancelling a shipment and Manifesting please refer to http://www.royalmail.com/pro-shipping-help.
 *
 * OpenAPI spec version: 3.0.20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ShipmentsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation shipmentsCancel
     *
     * Cancel Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentCancelRequest[] $shipment_cancel_requests Shipment Cancel Requests (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShipmentsCancelResponse
     */
    public function shipmentsCancel($x_rmg_auth_token, $shipment_cancel_requests)
    {
        list($response) = $this->shipmentsCancelWithHttpInfo($x_rmg_auth_token, $shipment_cancel_requests);
        return $response;
    }

    /**
     * Operation shipmentsCancelWithHttpInfo
     *
     * Cancel Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentCancelRequest[] $shipment_cancel_requests Shipment Cancel Requests (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShipmentsCancelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsCancelWithHttpInfo($x_rmg_auth_token, $shipment_cancel_requests)
    {
        $returnType = '\Swagger\Client\Model\ShipmentsCancelResponse';
        $request = $this->shipmentsCancelRequest($x_rmg_auth_token, $shipment_cancel_requests);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsCancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsCancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsCancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsCancelAsync
     *
     * Cancel Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentCancelRequest[] $shipment_cancel_requests Shipment Cancel Requests (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsCancelAsync($x_rmg_auth_token, $shipment_cancel_requests)
    {
        return $this->shipmentsCancelAsyncWithHttpInfo($x_rmg_auth_token, $shipment_cancel_requests)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsCancelAsyncWithHttpInfo
     *
     * Cancel Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentCancelRequest[] $shipment_cancel_requests Shipment Cancel Requests (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsCancelAsyncWithHttpInfo($x_rmg_auth_token, $shipment_cancel_requests)
    {
        $returnType = '\Swagger\Client\Model\ShipmentsCancelResponse';
        $request = $this->shipmentsCancelRequest($x_rmg_auth_token, $shipment_cancel_requests);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsCancel'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentCancelRequest[] $shipment_cancel_requests Shipment Cancel Requests (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsCancelRequest($x_rmg_auth_token, $shipment_cancel_requests)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling shipmentsCancel'
            );
        }
        // verify the required parameter 'shipment_cancel_requests' is set
        if ($shipment_cancel_requests === null || (is_array($shipment_cancel_requests) && count($shipment_cancel_requests) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_cancel_requests when calling shipmentsCancel'
            );
        }

        $resourcePath = '/shipments/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }


        // body params
        $_tempBody = null;
        if (isset($shipment_cancel_requests)) {
            $_tempBody = $shipment_cancel_requests;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsCreate
     *
     * Create Shipment
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\CreateShipmentShipment $shipment The shipment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShipmentCreateResponse
     */
    public function shipmentsCreate($x_rmg_auth_token, $shipment)
    {
        list($response) = $this->shipmentsCreateWithHttpInfo($x_rmg_auth_token, $shipment);
        return $response;
    }

    /**
     * Operation shipmentsCreateWithHttpInfo
     *
     * Create Shipment
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\CreateShipmentShipment $shipment The shipment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShipmentCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsCreateWithHttpInfo($x_rmg_auth_token, $shipment)
    {
        $returnType = '\Swagger\Client\Model\ShipmentCreateResponse';
        $request = $this->shipmentsCreateRequest($x_rmg_auth_token, $shipment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsCreateAsync
     *
     * Create Shipment
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\CreateShipmentShipment $shipment The shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsCreateAsync($x_rmg_auth_token, $shipment)
    {
        return $this->shipmentsCreateAsyncWithHttpInfo($x_rmg_auth_token, $shipment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsCreateAsyncWithHttpInfo
     *
     * Create Shipment
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\CreateShipmentShipment $shipment The shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsCreateAsyncWithHttpInfo($x_rmg_auth_token, $shipment)
    {
        $returnType = '\Swagger\Client\Model\ShipmentCreateResponse';
        $request = $this->shipmentsCreateRequest($x_rmg_auth_token, $shipment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsCreate'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\CreateShipmentShipment $shipment The shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsCreateRequest($x_rmg_auth_token, $shipment)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling shipmentsCreate'
            );
        }
        // verify the required parameter 'shipment' is set
        if ($shipment === null || (is_array($shipment) && count($shipment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment when calling shipmentsCreate'
            );
        }

        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }


        // body params
        $_tempBody = null;
        if (isset($shipment)) {
            $_tempBody = $shipment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsDefer
     *
     * Defer Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentDeferRequest[] $shipment_defer_requests The shipments to defer. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShipmentsDeferResponse
     */
    public function shipmentsDefer($x_rmg_auth_token, $shipment_defer_requests)
    {
        list($response) = $this->shipmentsDeferWithHttpInfo($x_rmg_auth_token, $shipment_defer_requests);
        return $response;
    }

    /**
     * Operation shipmentsDeferWithHttpInfo
     *
     * Defer Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentDeferRequest[] $shipment_defer_requests The shipments to defer. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShipmentsDeferResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsDeferWithHttpInfo($x_rmg_auth_token, $shipment_defer_requests)
    {
        $returnType = '\Swagger\Client\Model\ShipmentsDeferResponse';
        $request = $this->shipmentsDeferRequest($x_rmg_auth_token, $shipment_defer_requests);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsDeferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsDeferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsDeferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsDeferAsync
     *
     * Defer Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentDeferRequest[] $shipment_defer_requests The shipments to defer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsDeferAsync($x_rmg_auth_token, $shipment_defer_requests)
    {
        return $this->shipmentsDeferAsyncWithHttpInfo($x_rmg_auth_token, $shipment_defer_requests)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsDeferAsyncWithHttpInfo
     *
     * Defer Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentDeferRequest[] $shipment_defer_requests The shipments to defer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsDeferAsyncWithHttpInfo($x_rmg_auth_token, $shipment_defer_requests)
    {
        $returnType = '\Swagger\Client\Model\ShipmentsDeferResponse';
        $request = $this->shipmentsDeferRequest($x_rmg_auth_token, $shipment_defer_requests);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsDefer'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentDeferRequest[] $shipment_defer_requests The shipments to defer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsDeferRequest($x_rmg_auth_token, $shipment_defer_requests)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling shipmentsDefer'
            );
        }
        // verify the required parameter 'shipment_defer_requests' is set
        if ($shipment_defer_requests === null || (is_array($shipment_defer_requests) && count($shipment_defer_requests) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_defer_requests when calling shipmentsDefer'
            );
        }

        $resourcePath = '/shipments/defer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }


        // body params
        $_tempBody = null;
        if (isset($shipment_defer_requests)) {
            $_tempBody = $shipment_defer_requests;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsHold
     *
     * Hold Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentHoldRequest[] $shipment_hold_requests The shipments to hold. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShipmentsHoldResponse
     */
    public function shipmentsHold($x_rmg_auth_token, $shipment_hold_requests)
    {
        list($response) = $this->shipmentsHoldWithHttpInfo($x_rmg_auth_token, $shipment_hold_requests);
        return $response;
    }

    /**
     * Operation shipmentsHoldWithHttpInfo
     *
     * Hold Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentHoldRequest[] $shipment_hold_requests The shipments to hold. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShipmentsHoldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsHoldWithHttpInfo($x_rmg_auth_token, $shipment_hold_requests)
    {
        $returnType = '\Swagger\Client\Model\ShipmentsHoldResponse';
        $request = $this->shipmentsHoldRequest($x_rmg_auth_token, $shipment_hold_requests);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsHoldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsHoldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsHoldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsHoldAsync
     *
     * Hold Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentHoldRequest[] $shipment_hold_requests The shipments to hold. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsHoldAsync($x_rmg_auth_token, $shipment_hold_requests)
    {
        return $this->shipmentsHoldAsyncWithHttpInfo($x_rmg_auth_token, $shipment_hold_requests)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsHoldAsyncWithHttpInfo
     *
     * Hold Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentHoldRequest[] $shipment_hold_requests The shipments to hold. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsHoldAsyncWithHttpInfo($x_rmg_auth_token, $shipment_hold_requests)
    {
        $returnType = '\Swagger\Client\Model\ShipmentsHoldResponse';
        $request = $this->shipmentsHoldRequest($x_rmg_auth_token, $shipment_hold_requests);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsHold'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentHoldRequest[] $shipment_hold_requests The shipments to hold. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsHoldRequest($x_rmg_auth_token, $shipment_hold_requests)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling shipmentsHold'
            );
        }
        // verify the required parameter 'shipment_hold_requests' is set
        if ($shipment_hold_requests === null || (is_array($shipment_hold_requests) && count($shipment_hold_requests) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_hold_requests when calling shipmentsHold'
            );
        }

        $resourcePath = '/shipments/hold';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }


        // body params
        $_tempBody = null;
        if (isset($shipment_hold_requests)) {
            $_tempBody = $shipment_hold_requests;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsPrintDocument
     *
     * Print Document
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintDocumentRequest $print_document_request Print Document Request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PrintDocumentResponse
     */
    public function shipmentsPrintDocument($x_rmg_auth_token, $shipment_id, $print_document_request)
    {
        list($response) = $this->shipmentsPrintDocumentWithHttpInfo($x_rmg_auth_token, $shipment_id, $print_document_request);
        return $response;
    }

    /**
     * Operation shipmentsPrintDocumentWithHttpInfo
     *
     * Print Document
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintDocumentRequest $print_document_request Print Document Request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PrintDocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsPrintDocumentWithHttpInfo($x_rmg_auth_token, $shipment_id, $print_document_request)
    {
        $returnType = '\Swagger\Client\Model\PrintDocumentResponse';
        $request = $this->shipmentsPrintDocumentRequest($x_rmg_auth_token, $shipment_id, $print_document_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrintDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrintDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrintDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsPrintDocumentAsync
     *
     * Print Document
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintDocumentRequest $print_document_request Print Document Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPrintDocumentAsync($x_rmg_auth_token, $shipment_id, $print_document_request)
    {
        return $this->shipmentsPrintDocumentAsyncWithHttpInfo($x_rmg_auth_token, $shipment_id, $print_document_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsPrintDocumentAsyncWithHttpInfo
     *
     * Print Document
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintDocumentRequest $print_document_request Print Document Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPrintDocumentAsyncWithHttpInfo($x_rmg_auth_token, $shipment_id, $print_document_request)
    {
        $returnType = '\Swagger\Client\Model\PrintDocumentResponse';
        $request = $this->shipmentsPrintDocumentRequest($x_rmg_auth_token, $shipment_id, $print_document_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsPrintDocument'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintDocumentRequest $print_document_request Print Document Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsPrintDocumentRequest($x_rmg_auth_token, $shipment_id, $print_document_request)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling shipmentsPrintDocument'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling shipmentsPrintDocument'
            );
        }
        if (strlen($shipment_id) > 21) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling ShipmentsApi.shipmentsPrintDocument, must be smaller than or equal to 21.');
        }
        if (strlen($shipment_id) < 13) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling ShipmentsApi.shipmentsPrintDocument, must be bigger than or equal to 13.');
        }

        // verify the required parameter 'print_document_request' is set
        if ($print_document_request === null || (is_array($print_document_request) && count($print_document_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $print_document_request when calling shipmentsPrintDocument'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/printDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($print_document_request)) {
            $_tempBody = $print_document_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsPrintLabel
     *
     * Print Label
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintLabelRequest $print_label_request Print Label Request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PrintLabelResponse
     */
    public function shipmentsPrintLabel($x_rmg_auth_token, $shipment_id, $print_label_request)
    {
        list($response) = $this->shipmentsPrintLabelWithHttpInfo($x_rmg_auth_token, $shipment_id, $print_label_request);
        return $response;
    }

    /**
     * Operation shipmentsPrintLabelWithHttpInfo
     *
     * Print Label
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintLabelRequest $print_label_request Print Label Request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PrintLabelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsPrintLabelWithHttpInfo($x_rmg_auth_token, $shipment_id, $print_label_request)
    {
        $returnType = '\Swagger\Client\Model\PrintLabelResponse';
        $request = $this->shipmentsPrintLabelRequest($x_rmg_auth_token, $shipment_id, $print_label_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrintLabelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrintLabelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PrintLabelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsPrintLabelAsync
     *
     * Print Label
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintLabelRequest $print_label_request Print Label Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPrintLabelAsync($x_rmg_auth_token, $shipment_id, $print_label_request)
    {
        return $this->shipmentsPrintLabelAsyncWithHttpInfo($x_rmg_auth_token, $shipment_id, $print_label_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsPrintLabelAsyncWithHttpInfo
     *
     * Print Label
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintLabelRequest $print_label_request Print Label Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPrintLabelAsyncWithHttpInfo($x_rmg_auth_token, $shipment_id, $print_label_request)
    {
        $returnType = '\Swagger\Client\Model\PrintLabelResponse';
        $request = $this->shipmentsPrintLabelRequest($x_rmg_auth_token, $shipment_id, $print_label_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsPrintLabel'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipment_id Shipment Id&lt;br /&gt;The tracking number or Unique Id of the shipment to print. (required)
     * @param  \Swagger\Client\Model\PrintLabelRequest $print_label_request Print Label Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsPrintLabelRequest($x_rmg_auth_token, $shipment_id, $print_label_request)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling shipmentsPrintLabel'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling shipmentsPrintLabel'
            );
        }
        if (strlen($shipment_id) > 21) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling ShipmentsApi.shipmentsPrintLabel, must be smaller than or equal to 21.');
        }
        if (strlen($shipment_id) < 13) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling ShipmentsApi.shipmentsPrintLabel, must be bigger than or equal to 13.');
        }

        // verify the required parameter 'print_label_request' is set
        if ($print_label_request === null || (is_array($print_label_request) && count($print_label_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $print_label_request when calling shipmentsPrintLabel'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/printLabel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($print_label_request)) {
            $_tempBody = $print_label_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsRelease
     *
     * Release Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentsReleaseRequest $shipments_release_request Shipments Release Request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShipmentsReleaseResponse
     */
    public function shipmentsRelease($x_rmg_auth_token, $shipments_release_request)
    {
        list($response) = $this->shipmentsReleaseWithHttpInfo($x_rmg_auth_token, $shipments_release_request);
        return $response;
    }

    /**
     * Operation shipmentsReleaseWithHttpInfo
     *
     * Release Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentsReleaseRequest $shipments_release_request Shipments Release Request (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShipmentsReleaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsReleaseWithHttpInfo($x_rmg_auth_token, $shipments_release_request)
    {
        $returnType = '\Swagger\Client\Model\ShipmentsReleaseResponse';
        $request = $this->shipmentsReleaseRequest($x_rmg_auth_token, $shipments_release_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsReleaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsReleaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShipmentsReleaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsReleaseAsync
     *
     * Release Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentsReleaseRequest $shipments_release_request Shipments Release Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsReleaseAsync($x_rmg_auth_token, $shipments_release_request)
    {
        return $this->shipmentsReleaseAsyncWithHttpInfo($x_rmg_auth_token, $shipments_release_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsReleaseAsyncWithHttpInfo
     *
     * Release Shipments
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentsReleaseRequest $shipments_release_request Shipments Release Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsReleaseAsyncWithHttpInfo($x_rmg_auth_token, $shipments_release_request)
    {
        $returnType = '\Swagger\Client\Model\ShipmentsReleaseResponse';
        $request = $this->shipmentsReleaseRequest($x_rmg_auth_token, $shipments_release_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsRelease'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ShipmentsReleaseRequest $shipments_release_request Shipments Release Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsReleaseRequest($x_rmg_auth_token, $shipments_release_request)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling shipmentsRelease'
            );
        }
        // verify the required parameter 'shipments_release_request' is set
        if ($shipments_release_request === null || (is_array($shipments_release_request) && count($shipments_release_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipments_release_request when calling shipmentsRelease'
            );
        }

        $resourcePath = '/shipments/release';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }


        // body params
        $_tempBody = null;
        if (isset($shipments_release_request)) {
            $_tempBody = $shipments_release_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsServiceAvailability
     *
     * Service Availability
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ServiceAvailabilityShipment $shipment The shipment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ServiceAvailabilityResponse
     */
    public function shipmentsServiceAvailability($x_rmg_auth_token, $shipment)
    {
        list($response) = $this->shipmentsServiceAvailabilityWithHttpInfo($x_rmg_auth_token, $shipment);
        return $response;
    }

    /**
     * Operation shipmentsServiceAvailabilityWithHttpInfo
     *
     * Service Availability
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ServiceAvailabilityShipment $shipment The shipment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ServiceAvailabilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsServiceAvailabilityWithHttpInfo($x_rmg_auth_token, $shipment)
    {
        $returnType = '\Swagger\Client\Model\ServiceAvailabilityResponse';
        $request = $this->shipmentsServiceAvailabilityRequest($x_rmg_auth_token, $shipment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceAvailabilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceAvailabilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsServiceAvailabilityAsync
     *
     * Service Availability
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ServiceAvailabilityShipment $shipment The shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsServiceAvailabilityAsync($x_rmg_auth_token, $shipment)
    {
        return $this->shipmentsServiceAvailabilityAsyncWithHttpInfo($x_rmg_auth_token, $shipment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsServiceAvailabilityAsyncWithHttpInfo
     *
     * Service Availability
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ServiceAvailabilityShipment $shipment The shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsServiceAvailabilityAsyncWithHttpInfo($x_rmg_auth_token, $shipment)
    {
        $returnType = '\Swagger\Client\Model\ServiceAvailabilityResponse';
        $request = $this->shipmentsServiceAvailabilityRequest($x_rmg_auth_token, $shipment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsServiceAvailability'
     *
     * @param  string $x_rmg_auth_token Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  \Swagger\Client\Model\ServiceAvailabilityShipment $shipment The shipment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsServiceAvailabilityRequest($x_rmg_auth_token, $shipment)
    {
        // verify the required parameter 'x_rmg_auth_token' is set
        if ($x_rmg_auth_token === null || (is_array($x_rmg_auth_token) && count($x_rmg_auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_rmg_auth_token when calling shipmentsServiceAvailability'
            );
        }
        // verify the required parameter 'shipment' is set
        if ($shipment === null || (is_array($shipment) && count($shipment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment when calling shipmentsServiceAvailability'
            );
        }

        $resourcePath = '/shipments/serviceAvailability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_rmg_auth_token !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($x_rmg_auth_token);
        }


        // body params
        $_tempBody = null;
        if (isset($shipment)) {
            $_tempBody = $shipment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml', 'application/json'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
